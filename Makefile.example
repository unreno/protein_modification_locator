
BASE_DIR     = ${HOME}/.local
BASE_BIN_DIR = ${BASE_DIR}/bin

#	All scripts will be installed in this subdir
#	and linked from the parent. This will allow 
#	for the uninstallation of everything!
APPS_SUBDIR  = unreno_protein_modification_locator

#	mkdir will raise error if dir exists
#	mkdir -p will not and would create full path
MKDIR        = mkdir -p

TARGETS = 

#	the @ prefix means the line will be executed, but not printed

#	Do I need the &&s?  Why not just multiple lines?
#	The &&s are a condition so if the first part fails, the next will NOT run.
#	Each line is its own thing so if a cd is used, needs to be same line.

#	all is the default target that is used when none are given
all: make-all $(TARGETS)
	@printf "\nDONE MAKING ALL\n\n"

make-all:
	@printf "\nMAKING ALL\n\n"

install: install-all $(TARGETS:%=install-%) install-scripts
	@printf "\nDONE INSTALLING ALL\n\n"
	@printf "Add  $(BASE_BIN_DIR) TO YOUR PATH\n\n"

install-all:
	@printf "\nINSTALLING ALL\n\n"
	$(MKDIR) $(BASE_BIN_DIR)/$(APPS_SUBDIR)

uninstall: uninstall-scripts

uninstall-scripts:
	@printf "\nUNINSTALLING SCRIPTS\n\n"
	cd $(BASE_BIN_DIR); \
		find . -lname $(APPS_SUBDIR)/\* -exec rm {} \;
	rm -rf $(BASE_BIN_DIR)/$(APPS_SUBDIR)

install-scripts: uninstall-scripts
	$(MKDIR) $(BASE_BIN_DIR)/$(APPS_SUBDIR)
	@printf "\nINSTALLING SCRIPTS\n\n"

	cp scripts/* $(BASE_BIN_DIR)/$(APPS_SUBDIR)/

	cd $(BASE_BIN_DIR); \
	for file in `find $(APPS_SUBDIR) -type f` ; do \
		echo $$file; \
		ln -s $$file; \
	done

clean: clean-all $(TARGETS:%=clean-%)
	@printf "\nDONE CLEANING\n\n"

clean-all:
	@printf "\nCLEANING ALL\n\n"

#	make assumes that you are making this file.
#	As the dir test exists, it thinks its done, so
#	we must tell make to run 'make test' regardless.
.PHONY : test

test:
	@cd test/; test.bash

